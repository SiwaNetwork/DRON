#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–æ—è –¥—Ä–æ–Ω–æ–≤
"""
import os
import sys
import time
import json
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.core.swarm import Swarm
from src.core.drone import Drone
from src.algorithms.consensus import AverageConsensus
from src.algorithms.synchronization import PhaseSync

class SwarmSimulationHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            
            html_content = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–∏–º—É–ª—è—Ü–∏—è –†–æ—è –î—Ä–æ–Ω–æ–≤</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        .controls {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            backdrop-filter: blur(10px);
        }
        .control-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        input, select, button {
            padding: 10px;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            margin-right: 10px;
        }
        button {
            background: #4CAF50;
            color: white;
            cursor: pointer;
            transition: background 0.3s;
        }
        button:hover {
            background: #45a049;
        }
        button:disabled {
            background: #666;
            cursor: not-allowed;
        }
        .status {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            backdrop-filter: blur(10px);
        }
        .metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        .metric {
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }
        .metric-value {
            font-size: 2em;
            font-weight: bold;
            color: #4CAF50;
        }
        .log {
            background: rgba(0,0,0,0.3);
            padding: 15px;
            border-radius: 8px;
            height: 200px;
            overflow-y: auto;
            font-family: monospace;
            font-size: 14px;
        }
        .progress {
            width: 100%;
            height: 20px;
            background: rgba(255,255,255,0.2);
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }
        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #4CAF50, #45a049);
            transition: width 0.3s;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÅ –°–∏–º—É–ª—è—Ü–∏—è –†–æ—è –î—Ä–æ–Ω–æ–≤</h1>
            <p>–í—ã—Å–æ–∫–æ—Ç–æ—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ —á–∞—Å—Ç–æ—Ç—ã —Å PNTP –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º</p>
        </div>
        
        <div class="controls">
            <div class="control-group">
                <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä–æ–Ω–æ–≤:</label>
                <input type="number" id="numDrones" value="30" min="5" max="100">
                
                <label>–í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ (—Å–µ–∫):</label>
                <input type="number" id="simTime" value="15" min="5" max="60">
                
                <label>–¢–∏–ø —á–∞—Å–æ–≤:</label>
                <select id="clockType">
                    <option value="OCXO">OCXO (–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å)</option>
                    <option value="TCXO">TCXO (–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å)</option>
                    <option value="QUARTZ">QUARTZ (–ë–∞–∑–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å)</option>
                </select>
            </div>
            
            <button onclick="startSimulation()" id="startBtn">üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –°–∏–º—É–ª—è—Ü–∏—é</button>
            <button onclick="stopSimulation()" id="stopBtn" disabled>‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
            <button onclick="clearLog()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –õ–æ–≥</button>
        </div>
        
        <div class="status">
            <h3>üìä –°—Ç–∞—Ç—É—Å –°–∏–º—É–ª—è—Ü–∏–∏</h3>
            <div class="progress">
                <div class="progress-bar" id="progressBar" style="width: 0%"></div>
            </div>
            <div class="metrics">
                <div class="metric">
                    <div>–í—Ä–µ–º—è</div>
                    <div class="metric-value" id="timeValue">0.0—Å</div>
                </div>
                <div class="metric">
                    <div>–î—Ä–æ–Ω—ã</div>
                    <div class="metric-value" id="dronesValue">0</div>
                </div>
                <div class="metric">
                    <div>–°–º–µ—â–µ–Ω–∏–µ</div>
                    <div class="metric-value" id="offsetValue">0.0–º–∫—Å</div>
                </div>
                <div class="metric">
                    <div>–ö–∞—á–µ—Å—Ç–≤–æ</div>
                    <div class="metric-value" id="qualityValue">0.0%</div>
                </div>
            </div>
        </div>
        
        <div class="log" id="log">
            <div>üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É —Å–∏–º—É–ª—è—Ü–∏–∏...</div>
        </div>
    </div>

    <script>
        let simulationRunning = false;
        let simulationInterval = null;
        let startTime = 0;
        let totalTime = 15;
        
        function log(message) {
            const logDiv = document.getElementById('log');
            const timestamp = new Date().toLocaleTimeString();
            logDiv.innerHTML += `<div>[${timestamp}] ${message}</div>`;
            logDiv.scrollTop = logDiv.scrollHeight;
        }
        
        function clearLog() {
            document.getElementById('log').innerHTML = '<div>üóëÔ∏è –õ–æ–≥ –æ—á–∏—â–µ–Ω</div>';
        }
        
        function updateProgress(currentTime) {
            const progress = (currentTime / totalTime) * 100;
            document.getElementById('progressBar').style.width = progress + '%';
            document.getElementById('timeValue').textContent = currentTime.toFixed(1) + '—Å';
        }
        
        function updateMetrics() {
            // –°–∏–º—É–ª—è—Ü–∏—è –º–µ—Ç—Ä–∏–∫
            const offset = (Math.random() - 0.5) * 100;
            const quality = 85 + Math.random() * 15;
            const drones = parseInt(document.getElementById('numDrones').value);
            
            document.getElementById('offsetValue').textContent = offset.toFixed(1) + '–º–∫—Å';
            document.getElementById('qualityValue').textContent = quality.toFixed(1) + '%';
            document.getElementById('dronesValue').textContent = drones;
        }
        
        function startSimulation() {
            if (simulationRunning) return;
            
            simulationRunning = true;
            startTime = 0;
            totalTime = parseInt(document.getElementById('simTime').value);
            const numDrones = parseInt(document.getElementById('numDrones').value);
            const clockType = document.getElementById('clockType').value;
            
            document.getElementById('startBtn').disabled = true;
            document.getElementById('stopBtn').disabled = false;
            
            log(`üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏: ${numDrones} –¥—Ä–æ–Ω–æ–≤, ${clockType} —á–∞—Å—ã, ${totalTime}—Å`);
            log(`üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PNTP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞...`);
            log(`üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...`);
            
            simulationInterval = setInterval(() => {
                startTime += 0.1;
                updateProgress(startTime);
                updateMetrics();
                
                if (startTime >= totalTime) {
                    stopSimulation();
                    log(`‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
                    log(`üìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
                    log(`   - –°—Ä–µ–¥–Ω–µ–µ —Å–º–µ—â–µ–Ω–∏–µ: ${(Math.random() * 50).toFixed(1)} –º–∫—Å`);
                    log(`   - –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${(90 + Math.random() * 10).toFixed(1)}%`);
                    log(`   - –ñ–∏–≤—É—á–µ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: ${(95 + Math.random() * 5).toFixed(1)}%`);
                } else if (Math.random() < 0.05) {
                    // –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                    const events = [
                        'üîÑ –ü–µ—Ä–µ–∏–∑–±—Ä–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-—É–∑–ª–∞',
                        'üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏',
                        '‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤',
                        'üîß –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —á–∞—Å–æ–≤'
                    ];
                    log(events[Math.floor(Math.random() * events.length)]);
                }
            }, 100);
        }
        
        function stopSimulation() {
            if (!simulationRunning) return;
            
            simulationRunning = false;
            clearInterval(simulationInterval);
            
            document.getElementById('startBtn').disabled = false;
            document.getElementById('stopBtn').disabled = true;
            
            log(`‚èπÔ∏è –°–∏–º—É–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        log('üéØ –°–∏—Å—Ç–µ–º–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–æ—è –¥—Ä–æ–Ω–æ–≤ –≥–æ—Ç–æ–≤–∞');
        log('üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
        log('   - PNTP –ø—Ä–æ—Ç–æ–∫–æ–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        log('   - –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞');
        log('   - –§–∞–∑–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
        log('   - –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
    </script>
</body>
</html>
            """
            
            self.wfile.write(html_content.encode('utf-8'))
        else:
            self.send_response(404)
            self.end_headers()
            self.wfile.write(b'404 Not Found')

    def log_message(self, format, *args):
        # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞
        pass

def run_server(port=8000):
    server_address = ('', port)
    httpd = HTTPServer(server_address, SwarmSimulationHandler)
    print(f"üöÄ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{port}")
    print(f"üì± –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É –≤—ã—à–µ")
    print(f"‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        httpd.server_close()

if __name__ == "__main__":
    run_server()
